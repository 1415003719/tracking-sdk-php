<?php
/*
 * This code was auto generated by AfterShip SDK Generator.
 * Do not edit the class manually.
 */
namespace Tracking\API;

use Tracking\API\Base\APIBase;
use Tracking\Exception\AfterShipError;
use Tracking\Exception\ErrorCode;
use Tracking\Transport\Http;
use Tracking\API\Tracking\GetTrackingByIdQuery;
use Tracking\API\Tracking\GetTrackingsQuery;

class Tracking extends APIBase
{
    private $httpClient;

    public function __construct(Http $httpClient)
    {
        $this->httpClient = $httpClient;
    }

    /**
    * @throws AfterShipError
    */
    public function getTrackingById(
    string $id, 
    
     GetTrackingByIdQuery $query = null, 
    array $headers = []
    ): \Tracking\API\Tracking\GetTrackingByIdResponse
    {

            if ($id === "") {
                throw ErrorCode::genLocalError(ErrorCode::INVALID_REQUEST, "Param 'id' cannot be an empty string");
            }

        $options = [
            'headers' => $headers,
        'query' => $query ? $query->toArray() : [],
        
        ];
        $resp = $this->httpClient->request('GET', sprintf("/tracking/2024-10/trackings/%s" , $id ), $options);

        return $this->parseSingleResource($resp, \Tracking\API\Tracking\GetTrackingByIdResponse::class);
    }
    /**
    * @throws AfterShipError
    */
    public function retrackTrackingById(
    string $id, 
    
    
    array $headers = []
    ): \Tracking\API\Tracking\RetrackTrackingByIdResponse
    {

            if ($id === "") {
                throw ErrorCode::genLocalError(ErrorCode::INVALID_REQUEST, "Param 'id' cannot be an empty string");
            }

        $options = [
            'headers' => $headers,
        
        
        ];
        $resp = $this->httpClient->request('POST', sprintf("/tracking/2024-10/trackings/%s/retrack" , $id ), $options);

        return $this->parseSingleResource($resp, \Tracking\API\Tracking\RetrackTrackingByIdResponse::class);
    }
    /**
    * @throws AfterShipError
    */
    public function getTrackings(
    
    
     GetTrackingsQuery $query = null, 
    array $headers = []
    ): \Tracking\API\Tracking\GetTrackingsResponse
    {


        $options = [
            'headers' => $headers,
        'query' => $query ? $query->toArray() : [],
        
        ];
        $resp = $this->httpClient->request('GET', sprintf("/tracking/2024-10/trackings" ), $options);

        return $this->parseSingleResource($resp, \Tracking\API\Tracking\GetTrackingsResponse::class);
    }
    /**
    * @throws AfterShipError
    */
    public function createTracking(
    
     \Tracking\API\Tracking\CreateTrackingRequest $body, 
    
    array $headers = []
    ): \Tracking\API\Tracking\CreateTrackingResponse
    {


        $options = [
            'headers' => $headers,
        
        'json' => $body->toRequestArray(),
        ];
        $resp = $this->httpClient->request('POST', sprintf("/tracking/2024-10/trackings" ), $options);

        return $this->parseSingleResource($resp, \Tracking\API\Tracking\CreateTrackingResponse::class);
    }
    /**
    * @throws AfterShipError
    */
    public function updateTrackingById(
    string $id, 
     \Tracking\API\Tracking\UpdateTrackingByIdRequest $body, 
    
    array $headers = []
    ): \Tracking\API\Tracking\UpdateTrackingByIdResponse
    {

            if ($id === "") {
                throw ErrorCode::genLocalError(ErrorCode::INVALID_REQUEST, "Param 'id' cannot be an empty string");
            }

        $options = [
            'headers' => $headers,
        
        'json' => $body->toRequestArray(),
        ];
        $resp = $this->httpClient->request('PUT', sprintf("/tracking/2024-10/trackings/%s" , $id ), $options);

        return $this->parseSingleResource($resp, \Tracking\API\Tracking\UpdateTrackingByIdResponse::class);
    }
    /**
    * @throws AfterShipError
    */
    public function deleteTrackingById(
    string $id, 
    
    
    array $headers = []
    ): \Tracking\API\Tracking\DeleteTrackingByIdResponse
    {

            if ($id === "") {
                throw ErrorCode::genLocalError(ErrorCode::INVALID_REQUEST, "Param 'id' cannot be an empty string");
            }

        $options = [
            'headers' => $headers,
        
        
        ];
        $resp = $this->httpClient->request('DELETE', sprintf("/tracking/2024-10/trackings/%s" , $id ), $options);

        return $this->parseSingleResource($resp, \Tracking\API\Tracking\DeleteTrackingByIdResponse::class);
    }
    /**
    * @throws AfterShipError
    */
    public function markTrackingCompletedById(
    string $id, 
     \Tracking\API\Tracking\MarkTrackingCompletedByIdRequest $body, 
    
    array $headers = []
    ): \Tracking\API\Tracking\MarkTrackingCompletedByIdResponse
    {

            if ($id === "") {
                throw ErrorCode::genLocalError(ErrorCode::INVALID_REQUEST, "Param 'id' cannot be an empty string");
            }

        $options = [
            'headers' => $headers,
        
        'json' => $body->toRequestArray(),
        ];
        $resp = $this->httpClient->request('POST', sprintf("/tracking/2024-10/trackings/%s/mark-as-completed" , $id ), $options);

        return $this->parseSingleResource($resp, \Tracking\API\Tracking\MarkTrackingCompletedByIdResponse::class);
    }
}
